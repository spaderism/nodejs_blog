#!/usr/bin/env node

'use strict';

const app = require('app');
const http = require('http');
const logger = require('lib/logger')('bin:www');

const database = require('database/database');
const appConfig = require('config/appConfig');

const normalizePort = (val) => {
    const port = parseInt(val, 10);

    // named pipe
    if (isNaN(port)) { return val; }
    // port number
    if (port >= 0) { return port; }

    return false;
};

const onError = (error) => {
    if (error.syscall !== 'listen') { throw error; }

    const bind = typeof port === 'string'
               ? 'Pipe ' + port
               : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
};

const onListening = () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
               ? 'pipe ' + addr
               : 'port ' + addr.port;

    logger.debug('Listening on ' + bind);

    database.init(app, appConfig);
};

const port = normalizePort(appConfig.serverPort);

app.set('port', port);
app.on('close', () => {
    logger.debug('서버 객체가 종료됩니다.');

    if (database.mongodb) {
        database.mongodb.close();
    }
});

process.on('uncaughtException', (err) => {
    logger.debug('uncaughtException 발생함 : ' + err);
    logger.debug('서버 프로세스 종료하지 않고 유지함.');
    logger.debug(err.stack);
});

process.on('SIGTERM', () => {
    logger.debug('프로세스가 종료됩니다.');
    app.close();
});

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
